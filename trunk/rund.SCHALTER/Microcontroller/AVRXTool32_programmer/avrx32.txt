■Win32版AVRライタ制御ツールの使い方■
								  2005. 8. 10


  このアーカイブは、上位のドキュメントに付随する物ですので、ハードウェアに関し
てはAVRライタの製作についてのページ(http://elm-chan.org/)を参照してください。

  avrx32.txt   - プログラム使用方法 (このファイル)。
  tips.txt     - プログラム移植やライタ改良のためのTIPS。
  differ.txt   - DOS版との主な相違点の解説。
  <src>        - 制御プログラムのソースファイル。
  <bin>        - 制御プログラムの実行ファイル等。



【動作環境と基本的な使い方】

  これらの、ライタ制御プログラムは Win32環境で動作します。基本的にコマンドラ
インでの操作となりますので、コマンドプロンプトから

avrsp <switch> <hex file> ...

といった感じで使用します。スイッチは大文字小文字を区別しません。コマンドラ
インスイッチは、.iniファイルで予め指定しておくこともできます。.iniファイルは
カレントディレクトリ→バイナリディレクトリの順に検索します。

  これらのライタ制御プログラムの特徴として、デバイスへのアクセス開始で、まず
デバイスIDを読み込んでデバイス固有の情報を得てからそれぞれのデバイスに最適な
条件で動作するようになっています。このため、ユーザ側でデバイスタイプを指定す
る必要がありません。そのデバイス用に書かれたプログラムを用意するだけでよいの
です。実行ファイルやそのショートカットにHEXファイルをD&Dするだけで一発書き込
みすることも可能です。




【LPT接続のパラレルライタで書き込み】

  制御ソフトは、avrpp.exe です。コマンドを実行するとAVRをソケットにセットす
るよう要求が出ますので、それにしたがってください。特に、起動後最初にライタを
使うときはポートの状態が不定 (LEDが点灯している) なので、その状態でデバイスを
セットすると壊れますので注意してください。20ピンDIP以外のAVRに書き込む場合は、
ソケット変換(製作ページ参照)アダプタも製作する必要があります。
  avrpp.exeの主なコマンドは次の通りです。

  -r    デバイスチェック。
  -rp   プログラムコードの読み出し。
  -re   EEPROMデータの読み出し。
  -rf   ヒューズデータ等の読み出し。

  -v    消去・書き込み動作をスキップして、ベリファイ動作のみ実行。

  -l[<bin>] デバイスのロック(読み出し禁止)。

  -e    チップ消去。フラッシュメモリ書き込みの際にチップ消去しているので、
        特に使用する必要はありません。

  -fl<bin> 下位ヒューズバイト書き込み。ビットパターンは2進数で指定します。
  -fh<bin> 上位ヒューズバイト書き込み。
  -fx<bin> 拡張ヒューズバイト書き込み。

  -p<n> 使用する LPTポート番号の指定。デフォルトは LPT1ですので、LPT1以外で使
        用する場合は、このスイッチを追加します。

  -8    最初から8ピンデバイスとして自動検出を試みる。
  -5    最初から8ピンデバイスのtiny15として自動検出を試みる。

  -c    プログラム書き込み時、Calibration bytesをコピー。(TIPS.TXT参照)


例１：prog1.hexとtable.hexをプログラムメモリに、prog1.eepをEEPROMに書き込む。
      拡張子が.eepのファイルはEEPROMデータ、それ以外はプログラムとして扱われ
      ます。

  >avrpp prog1.hex table.hex prog1.eep


例３：ヒューズ値は -fl -fh -fxスイッチと共に2進数で指定します。無効ビット
      (-)はマスクアウトされるので、0または1どちらを指定してもかまいません。
      先行するゼロは省略できます。ISPモードでは間違えて設定すると認識不能
      になる場合がある（特にクロック・リセット関係）十分注意して指定してく
      ださい

  >avrpp -FL11100011
            ~~~~~~~~
  この例では、ヒューズバイト(Low)の ビット[4:2]をプログラム("0")、それ以外を
  アンプログラム("1")しています。


例４：プログラムメモリまたはEEPROMを読み出し、ファイルに格納。

  >avrpp -rp > file.hex
  >avrpp -re > file.eep

  読み出したデータは標準出力にインテルHEXフォーマットで出力するので、適当にリ
  ダイレクトしてファイルに落とします。ある1行分のデータがすべて 0xFFだった場
  合、その行を省略します。


例５：書き込み系コマンドの連続実行。

  >avrpp -fl111100 -fh11110 -l file.hex file.eep ...

  書き込み系コマンドは複数同時に指定して一括で処理することができます。
  実行順序はコマンドライン中の順によらす、Flashメモリ、EEPROM、ヒューズ、
  ロックビットの順になります。hexファイルのアドレス範囲に重複があるときは、
  右側のファイルで上書きされます。




【ISPケーブルでオンボード書き込み】

  AVRの書き込みでは特別な理由がない限り、ほとんどはこのISP方式で行われます。
制御プログラムは、avrsp.exe です。ISPケーブルをターゲットボードへ接続してター
ゲットの電源をONにして実行します。使用可能なスイッチは次のとおりで、それぞれ
の使用方法はパラレル書き込みと同じです。
  CPLD/FPGA用のケーブル(パラレルポート接続)を使うときは、JTAGケーブルの
{TCK, TDO, TDI, TMS} が順にAVRの {SCK, MISO, MOSI, RESET} にそれぞれ対応しま
す。JTAGケーブルのタイプは自動認識します。


  -r    デバイスとの接続チェック。
  -rp   プログラムコードの読み出し。
  -re   EEPROMデータの読み出し。
  -rf   ヒューズデータ等の読み出し。

  -v    消去・書き込み動作をスキップして、続くベリファイ動作のみ実行。

  -l[<bin>] デバイスのロック。値を省略するとデフォルト値（LB1,LB2ともにプロ
            グラム）が使用されます。

  -fl<bin> 下位ヒューズバイト書き込み。ビットパターンは2進数で指定します。
  -fh<bin> 上位ヒューズバイト書き込み。
  -fx<bin> 拡張ヒューズバイト書き込み。

  -e    チップ消去。書き込みの際必要に応じてチップ消去しているので、通常は使
        用する必要はありません。

  -pc<n>, -pl<n>, -pv<n>, -pb<n>[:<bps>]
        使用するポート番号の指定。デフォルトは -pc1 (COM1 direct I/O)なので、
        それ以外で使用する場合は、このスイッチで使用ポートを変更します。
        -pc<n>は、COMポート(direct I/O)、-pl<n>は、LPTポート(direct I/O)、
        -pv<n>は、COMポート(via API)、-pb<n>は、SPIブリッジ(on COM<n>)です。
        前者2つはダイレクトI/Oでポートにアクセスするので、NT系OSではダイレクト
        I/Oドライバ(giveio.sys)が必要になります。後者2つはAPI経由での操作にな
        るので、USB-RS232コンバータも使用可能になります。ただし、USB経由で -pv
        を使うと、書き込みに100倍程度の時間がかかります。
        SPIブリッジでは、USBシリアルチップに対応するため、ボーレートを変更する
        こともできます(デフォルトは115.2k)。

  -c    フラッシュメモリ書き込み時、Calibration bytesをコピー。(TIPS.TXT参照)

  -d<n> デバイスとの通信タイミング（I/Oディレイ）の指定です。一般的に動作ク
        ロックが 1MHz以上ならデフォルト値（-d3）でいけるはずですが、低速ク
        ロックで動作していていたり、パソコンのI/O速度が速い場合は認識できな
        かったりエラーになったりします。そのようなときは -d100程度までの範囲
        で試してください。また、デバイスが高速動作しているときはディレイを
        減らして書き込み時間を短縮できます。

  -w    プログラム終了時にPauseする。

  -t<デバイス名>
        デバイスタイプを強制的に指定する。-ttiny26 -t90S2313 -tmega128 など。
        何らかの理由でデバイス自動検出がうまくいかないときに試してみてくださ
        い。

  -z    テスト信号出力。SCKに1ms周期の正極性パルスを出力します。オシロで波形
        を調べてハードウェアの互換性をチェックできます。




【ロックビット書き込み方】

  プロテクトをかける場合は -l[<bin>] スイッチを使用します。数値を省略すると、
デフォルトでは LB2とLB1がプログラム("0")されます。これを変更したい場合や、
一緒に存在するブートロックビットをプログラムしたい場合は、ロックバイトの値を
明示的に指定する必要があります。詳しくは各デバイスのデータシートを参照してく
ださい。




【COMポートISPケーブルでの通信】

  COMポート接続のライタ(ISPケーブル)では、ホストPCとAVRの間で通信することがで
きます。ハードウェアデバッグや実際の運用などに役立つでしょう。
  プログラムを書き込んだ後、ホストPCで通信ソフトを起動すると、ER信号が"H"に
なり、AVRのリセットが解除され、AVRのプログラムが走ります。この際、MISOに当た
るピンを出力に、MOSIに当たるピンを入力に設定することにより、ソフトウェアUART
でホストPCと通信することができるのです。この場合は、COMポート直結なので、シ
リアルデータの論理が逆になります（L=1、H=0）。ソフトウェアUARTについては別
アーカイブのサンプルコードを参照してみてください。




【エラーメッセージと原因・対策】

  書き込みツールを使用する際に、エラーを出して停止する場合があります。
次にそれぞれのエラーメッセージとその原因と対策を示します。


<ファイル名> : File access failure
----------------------------------
そのファイルが開けない。


<ファイル名> (<行番号>) : Hex format error
------------------------------------------
HEXファイルにエラーがある。または、HEXファイルではない。


Writing...Time out at AAAA
--------------------------
書き込み中にポーリングタイムアウトが発生した。


Verifying...Failed at AAAA:WW-RR
--------------------------------
書き込んだデータと読み出したデータが一致しない。


Unknown device (<h>-<h>-<h>)
----------------------------
デバイスIDが無効。3つの値は、読み出されたデバイスID。原因として、デバイスが
正常に動作していない、未サポートのデバイス、通信エラー、またはISP動作ができ
ない状態になっているなどが考えられます。


Locked device or Synchronization failed.
----------------------------------------
ISP動作時でのみ出るエラーで、デバイスがロックされている。または通信エラーが
原因でこのメッセージが出る場合もあります。ロックされたデバイスには書き込め
ないので、-e コマンドで全消去する必要があります。


No LPT<n>(0xXXX) port.
No COM<n>(0xXXX) port.
COM<n> could not be opend.
Invalid Port#.
--------------------------
指定されたポートが存在しない、またはそのポートクラスに対して無効など。ダイレ
クトI/Oの場合、ポート番号とI/Oアドレスの対応は、定数テーブルで決め打ちしてい
ます(hwctrl.h参照)。


I/O driver initialization failed.
---------------------------------
WindowsNT/2k/XPの環境ではダイレクトI/Oドライバ(giveio.sys)が必要になりますが、
これが利用可能になっていない。




【このアーカイブの扱いについて】

  このアーカイブに含まれるファイルはすべてフリーソフトとします。転載・再配布
・使用については特に制限を設けていませんが、フリーソフトを扱う上でのルールは
お守りください。
  AVRライタ関連について、次のホームページでもサポートを行っていますので、ご
利用ください。

Email: root@elm-chan.org
Homepage: http://elm-chan.org/




【更新履歴】

  1999.10.3	初公開(DOS版)
  ------------------------------------------------------------------------
  2004.5.4	ISPライタのWin32版公開。
  2004.9.1	mega165に対応。mega8のパラメータ修正。
  2004.11.11	パラレルライタのWin32版公開。mega325/3250/645/6450に対応。
  2005.2.1	mega406に対応(AVRPP)。
  2005.2.14	PWM2/3に対応(AVRSP/AVRPP)。
  2005.2.15	tiny25/45/85に対応(AVRSP/AVRPP)。
  2005.3.13	mega640/1280/1281/2560/2561に対応(AVRSP/AVRPP)。
  2005.4.24	API経由COMポートとSPIブリッジに対応(AVRSP)。
  2005.5.20	SPIブリッジでの速度を改善(AVRSP)。
  2005.8.10	tiny24/44/84に対応(AVRSP/AVRPP)。

